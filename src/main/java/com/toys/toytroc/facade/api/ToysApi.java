/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.toys.toytroc.facade.api;

import com.toys.toytroc.facade.model.ToyVO;
import io.swagger.annotations.*;
import com.toys.toytroc.facade.model.Order;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-26T13:16:13.014Z")

@Api(value = "toys", description = "the toys API")
public interface ToysApi {

    @ApiOperation(value = "Delete exchange order by ID", nickname = "deleteOrder", notes = "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors", tags={ "exchange", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/toys/order/{orderId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@Min(1L) @ApiParam(value = "ID of the order that needs to be deleted", required = true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "Finds toys corresponding to mulitple criterias", nickname = "findToys", notes = "Multiple status values can be provided with comma separated strings", response = ToyVO.class, responseContainer = "List", authorizations = {
        @Authorization(value = "toystore_auth", scopes = {
            @AuthorizationScope(scope = "read:toys", description = "read your pets"),
            @AuthorizationScope(scope = "write:toys", description = "modify pets in your account")
            })
    }, tags={ "toys", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ToyVO.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/toys/{searchCriteria}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ToyVO>> findToys(@ApiParam(value = "toys search criteria", required = true) @PathVariable("searchCriteria") List<String> searchCriteria);


    @ApiOperation(value = "Find exchange order by ID", nickname = "getOrderById", notes = "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions", response = Order.class, tags={ "exchange", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Order not found") })
    @RequestMapping(value = "/toys/order/{orderId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrderById(@Min(1L) @Max(10L) @ApiParam(value = "ID of pet that needs to be fetched", required = true) @PathVariable("orderId") Long orderId);


    @ApiOperation(value = "get the available toys", nickname = "getToys", notes = "Get the avaialable toys : not expired, not deleted and not suspended", response = ToyVO.class, responseContainer = "List", authorizations = {
        @Authorization(value = "toystore_auth", scopes = {
            @AuthorizationScope(scope = "read:toys", description = "read your pets"),
            @AuthorizationScope(scope = "write:toys", description = "modify pets in your account")
            })
    }, tags={ "toys", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the list of available toys", response = ToyVO.class, responseContainer = "List"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/toys",
        produces = { "application/xml", "application/json" },
        //consumes = { "application/json", "application/xml"},
        method = RequestMethod.GET)
    ResponseEntity getToys(@ApiParam(value = "the  userId of the user who requested the list of toys", required = true) @RequestHeader(value = "userId", required = true) String userId);


    @ApiOperation(value = "Place an order for a toy", nickname = "placeOrder", notes = "", response = Order.class, tags={ "exchange", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
        @ApiResponse(code = 400, message = "Invalid Order") })
    @RequestMapping(value = "/toys/order",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Order> placeOrder(@ApiParam(value = "order placed for purchasing the pet", required = true) @Valid @RequestBody Order body);

}
